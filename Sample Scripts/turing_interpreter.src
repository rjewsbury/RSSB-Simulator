.section .text
.origin 0x0019

	INIT R0				;R0 = head position
	INIT R1				;R1 = mapped head position in memory
	ADD R2, =tm, tape_offset	;R2 = tape base
	INIT R3				;R3 = tape symbol
	INIT R4				;R4 = operation
	
exec_loop:
	;determine address of head position
	MOV R1, R0
	IFLT R1, 0
		NEG R1
		ADD R1, R1
		SUBP R1, 1
	ELSE
		ADD R1, R1
	END
	;add the base address
	ADD R1, R2
	
	;load tape symbol
	LOAD R3, [R1]
	
	;determine the operation
	MOV R5, =tm		;iterator over tm tuples
	MOV R4, -1		;set the operation to a null operation
op_loop:
	IFLT R5, R2
		;if there are remaining tuples, check the next one
		LOAD R6, [R5, 0]	;R6 = tuple's st_in
		LOAD R7, [R5, 1]	;R7 = tuple's sym
		
		;compare if the tuple info matches the current info
		IFLT R6, state
		ELSE
			IFGT R6, state
			ELSE
				IFLT R7, R3
				ELSE
					IFGT R7, R3
					ELSE
						;all this nonsense checks (st_in==st)&&(sym_in==sym)
						;if true, load the operation and move to the next state
						LOAD R4, [R5, 2]
						LOAD state, [R5, 3]
					END
				END
			END
		END
		;check if the tuple failed the test
		;by checking if we still have the null operation in R4
		IFLT R4, 0
			ADD R5, 4	;advance to the next tuple
			B op_loop	;repeat the loop
		ELSE
		END
	ELSE
		;if there is no matching tuple, the machine halts
		HALT
	END
	
perform_op:
	;if the program reaches this point, the correct operation has been found
	IFLT R4, 2
		IFLT R4, 1
			; 0 = write a 0
			STR 0, [R1]
		ELSE
			; 1 = write a 1
			STR 1, [R1]
		END
	ELSE
		IFLT R4, 3
			; 2 = move head left
			SUBP R0, 1
		ELSE
			; 3 = move head right 
			ADD R0, 1
		END
	END
	
	;repeat the loop
	B exec_loop

;the stack is not used by the turing machine
.section .stack
.origin 0x1000

;the input required by the turing machine is stored in RAM, after the code
.section .data
.origin 0x0231

state:
	;the initial state of the system
	.word 0
	
tape_offset:
	;the number of words used by tm
	;required because tm is not a fixed size
	.word 60
	
tm:
	;list of 4-tuple turing machine instructions
	;(st_in, sym, op, st_out)
	
	;this turing machine reads the number of 1's on the tape starting at cell 0,
	;clears them, and prints 2*(n-1) 1's onto the tape.
	;This same turing machine is used by J Strother Moore
	;in "Proof Pearl: Proving a Simple Von Neumann Machine Turing Complete"
	
	;e.g. the tape (11111) results in (00000011111111)
	
	.word 0
	.word 1
	.word 0
	.word 1
	
	.word 1
	.word 0
	.word 3
	.word 2
	
	.word 2
	.word 1
	.word 0
	.word 3
	
	.word 3
	.word 0
	.word 3
	.word 4
	
	.word 4
	.word 1
	.word 3
	.word 4
	
	.word 4
	.word 0
	.word 3
	.word 5
	
	.word 5
	.word 1
	.word 3
	.word 5
	
	.word 5
	.word 0
	.word 1
	.word 6
	
	.word 6
	.word 1
	.word 3
	.word 6
	
	.word 6
	.word 0
	.word 1
	.word 7
	
	.word 7
	.word 1
	.word 2
	.word 7
	
	.word 7
	.word 0
	.word 2
	.word 8
	
	.word 8
	.word 1
	.word 2
	.word 1
	
	.word 1
	.word 1
	.word 2
	.word 1
	
	;unnecessary null tuple, but it lets me see where the tape starts in memory
	.word -1
	.word -1
	.word -1
	.word -1
	
	;tape:
	;a theoretically infinite tape.
	;to store infinite cells in both directions using only positive addresses,
	;map positive tape cells to even addresses, and negative cells to odd
	
	.word 1		;0
	.word 0		;-1
	.word 1		;1
	.word 0		;-2
	.word 1		;2
	.word 0		;-3
	.word 1		;3
	.word 0		;-4
	.word 1		;4
	.word 0		;-5
	.word 0		;5
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0
	
